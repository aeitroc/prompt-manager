'use client'

import { useState } from 'react'
import { EnhancedHeader } from '@/components/layout/enhanced-header'
import { PromptList } from '@/components/prompts/prompt-list'
import { PromptDialog } from '@/components/prompts/prompt-dialog'
import { PromptFilters } from '@/components/prompts/prompt-filters'
import { HeaderSkeleton } from '@/components/ui/skeleton'
import { H1, H2, Body, Caption, Typography } from '@/components/ui/typography'
import { Button } from '@/components/ui/button'
import { Plus } from 'lucide-react'
import { usePrompts } from '@/hooks/use-prompts'
import { useCategories } from '@/hooks/use-categories'
import { useTags } from '@/hooks/use-tags'
import { CategoriesManager } from '@/components/categories/categories-manager'
import { TagsManager } from '@/components/tags/tags-manager'
import type { Prompt, Category, Tag } from '@/types/prompt'

export default function HomePage() {
  const [activeSection, setActiveSection] = useState('prompts')
  const [filters, setFilters] = useState({
    category: 'all',
    tags: [],
  })
  const [dialogOpen, setDialogOpen] = useState(false)
  const [editingPrompt, setEditingPrompt] = useState<(Prompt & { category: Category | null; tags: Tag[] }) | null>(null)

  // Get data hooks
  const { prompts, isLoading, refetch } = usePrompts({
    categoryId: filters.category === 'all' ? undefined : filters.category,
    tags: filters.tags,
  })

  const { categories, isLoading: categoriesLoading, refetch: refetchCategories } = useCategories()
  const { tags, isLoading: tagsLoading, refetch: refetchTags } = useTags()
  
  const handleAddPrompt = () => {
    setEditingPrompt(null)
    setDialogOpen(true)
  }
  
  const handleEditPrompt = (prompt: Prompt & { category: Category | null; tags: Tag[] }) => {
    setEditingPrompt(prompt)
    setDialogOpen(true)
  }

  const handleEnhancePrompt = (prompt: Prompt & { category: Category | null; tags: Tag[] }) => {
    setEditingPrompt(prompt)
    setDialogOpen(true)
  }
  
  const handleDeletePrompt = async (id: string) => {
    if (!confirm('Are you sure you want to delete this prompt?')) return
    
    try {
      const response = await fetch(`/api/prompts/${id}`, { method: 'DELETE' })
      if (!response.ok) {
        throw new Error('Failed to delete prompt')
      }
      refetch()
    } catch (error) {
      console.error('Error deleting prompt:', error)
    }
  }
  
  const handleCloseDialog = () => {
    setDialogOpen(false)
    setEditingPrompt(null)
  }
  
  const handleSuccess = () => {
    refetch()
    refetchCategories()
    refetchTags()
  }

  const handleNavigate = (section: string) => {
    setActiveSection(section)
  }

  const handlePromptSelect = (prompt: Prompt) => {
    // For now, just scroll to the prompt in the list
    // In a real implementation, this might open a preview or navigate to details
    console.log('Selected prompt:', prompt.title)
  }

  
  // Show loading state for header
  if (isLoading) {
    return (
      <div className="min-h-screen bg-bg-primary">
        <HeaderSkeleton />
        <main className="container mx-auto px-6 py-8" role="main">
          <div className="space-y-8">
            <div className="h-10 bg-bg-secondary rounded-sm animate-pulse" />
            <div className="text-center py-12">
              <div className="h-8 w-48 bg-bg-secondary rounded-sm animate-pulse mx-auto mb-4" />
              <div className="h-4 w-64 bg-bg-tertiary rounded-sm animate-pulse mx-auto" />
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {[...Array(6)].map((_, i) => (
                <div key={i} className="h-32 bg-bg-secondary rounded-sm animate-pulse shadow-sm" />
              ))}
            </div>
          </div>
        </main>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-bg-primary">
      {/* Skip to main content for accessibility */}
      <a href="#main-content" className="skip-to-main" aria-label="Skip to main content">
        Skip to main content
      </a>

      <EnhancedHeader
        prompts={prompts}
        categories={categories}
        tags={tags}
        onManageCategories={() => setActiveSection('categories')}
        onManageTags={() => setActiveSection('tags')}
        onPromptSelect={handlePromptSelect}
        activeSection={activeSection}
        onNavigate={handleNavigate}
      />

      <main className="container mx-auto px-6 py-8" id="main-content">
        {/* Simplified direct content rendering - no tabs */}
        <div className="space-y-8">
          <PromptFilters filters={filters} onFilterChange={setFilters} />

          {/* Simplified header section with New Prompt button */}
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <Typography variant="h2" weight="semibold">
                Your Prompts
              </Typography>
            </div>
            <Button
              onClick={handleAddPrompt}
              className="vscode-button-primary flex items-center gap-2"
            >
              <Plus className="w-4 h-4" />
              New Prompt
            </Button>
          </div>

          {prompts.length === 0 ? (
            <div className="text-center py-16">
              <div className="w-16 h-16 bg-bg-tertiary rounded-full flex items-center justify-center mx-auto mb-6">
                <Typography variant="h1" color="muted">üìù</Typography>
              </div>
              <Typography variant="h3" weight="medium" className="mb-2">
                No prompts yet
              </Typography>
              <Body color="secondary" className="mb-6 max-w-md mx-auto">
                Create your first prompt to get started with managing your AI prompt library efficiently.
              </Body>
            </div>
          ) : (
            <PromptList
              prompts={prompts}
              isLoading={isLoading}
              onEdit={handleEditPrompt}
              onEnhance={handleEnhancePrompt}
              onDelete={handleDeletePrompt}
              view="grid"
            />
          )}
        </div>

        {/* Other sections (Categories and Tags) - simplified approach */}
        {activeSection === 'categories' && (
          <div className="space-y-6">
            <div className="flex items-center gap-4">
              <Typography variant="h2" weight="semibold">
                Categories
              </Typography>
            </div>

            {categoriesLoading ? (
              <div className="space-y-4">
                {[...Array(3)].map((_, i) => (
                  <div key={i} className="h-16 bg-bg-secondary rounded-sm animate-pulse shadow-sm" />
                ))}
              </div>
            ) : (
              <CategoriesManager />
            )}
          </div>
        )}

        {activeSection === 'tags' && (
          <div className="space-y-6">
            <div className="flex items-center gap-4">
              <Typography variant="h2" weight="semibold">
                Tags
              </Typography>
            </div>

            {tagsLoading ? (
              <div className="space-y-4">
                {[...Array(3)].map((_, i) => (
                  <div key={i} className="h-12 bg-bg-secondary rounded-sm animate-pulse shadow-sm" />
                ))}
              </div>
            ) : (
              <TagsManager />
            )}
          </div>
        )}
      </main>

      <PromptDialog
        isOpen={dialogOpen}
        onClose={handleCloseDialog}
        prompt={editingPrompt}
        onSuccess={handleSuccess}
      />
    </div>
  )
}